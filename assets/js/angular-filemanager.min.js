/*! * Angular FileManager v0.8 (https://github.com/joni2back/angular-filemanager) * Jonas Sciangula Street <joni2back@gmail.com> * Licensed under MIT (https://github.com/joni2back/angular-filemanager/blob/master/LICENSE) */ (function() { var app = angular.module('FileManagerApp', ['pascalprecht.translate', 'ngCookies']); app.directive('ngFile', function($parse) { return { restrict: 'A', link: function(scope, element, attrs) { var model = $parse(attrs.ngFile); var modelSetter = model.assign; element.bind('change', function() { scope.$apply(function() { modelSetter(scope, element[0].files); }); }); } }; }); app.directive('ngRightClick', function($parse) { return function(scope, element, attrs) { var fn = $parse(attrs.ngRightClick); element.bind('contextmenu', function(event) { scope.$apply(function() { event.preventDefault(); fn(scope, {$event: event}); }); }); }; }); app.filter('strLimit', ['$filter', function($filter) { /*going to use css3 ellipsis instead of this*/ return function(input, limit) { if (input.length <= limit) { return input; } return $filter('limitTo')(input, limit) + '...'; }; }]); /** * jQuery inits */ var menuSelectors = '.main-navigation .table-files td a, .iconset a.thumbnail'; $(window.document).on('shown.bs.modal', '.modal', function() { var self = this; var timer = setTimeout(function() { $('[autofocus]', self).focus(); timer && clearTimeout(timer); }, 100); }); $(window.document).on('click', function() { $("#context-menu").hide(); }); $(window.document).on('contextmenu', menuSelectors, function(e) { $("#context-menu").hide().css({ left: e.pageX, top: e.pageY }).show(); e.preventDefault(); }); })();;(function() { angular.module('FileManagerApp').service('chmod', function () { var Chmod = function(initValue) { this.owner = this.getRwxObj(); this.group = this.getRwxObj(); this.others = this.getRwxObj(); if (initValue) { var codes = isNaN(initValue) ? this.convertfromCode(initValue): this.convertfromOctal(initValue); if (! codes) { throw new Error('Invalid input data'); } this.owner = codes.owner; this.group = codes.group; this.others = codes.others; } }; Chmod.prototype.toOctal = function(prepend, append) { var props = ['owner', 'group', 'others']; var result = []; for (var i in props) { var key = props[i]; result[i] = this[key].read && this.octalValues.read || 0; result[i] += this[key].write && this.octalValues.write || 0; result[i] += this[key].exec && this.octalValues.exec || 0; } return (prepend||'') + result.join('') + (append||''); }; Chmod.prototype.toCode = function(prepend, append) { var props = ['owner', 'group', 'others']; var result = []; for (var i in props) { var key = props[i]; result[i] = this[key].read && this.codeValues.read || '-'; result[i] += this[key].write && this.codeValues.write || '-'; result[i] += this[key].exec && this.codeValues.exec || '-'; } return (prepend||'') + result.join('') + (append||''); }; Chmod.prototype.getRwxObj = function() { return { read: false, write: false, exec: false }; }; Chmod.prototype.octalValues = { read: 4, write: 2, exec: 1 }; Chmod.prototype.codeValues = { read: 'r', write: 'w', exec: 'x' }; Chmod.prototype.convertfromCode = function (str) { str = ('' + str).replace(new RegExp("\\s", "g"), ''); str = str.length === 10 ? str.substr(1) : str; if (! str.match(new RegExp("^[\-rwx]{9}$"))) { return; } var result = [], vals = str.match(new RegExp(".{1,3}", "g")); for (var i in vals) { var rwxObj = this.getRwxObj(); rwxObj.read = !!vals[i].match('r'); rwxObj.write = !!vals[i].match('w'); rwxObj.exec = !!vals[i].match('x'); result.push(rwxObj); } return { owner : result[0], group : result[1], others: result[2] }; }; Chmod.prototype.convertfromOctal = function (str) { str = ('' + str).replace(/\s/g, ''); str = str.length === 4 ? str.substr(1) : str; if (! str.match(new RegExp("^[0-7]{3}$"))) { return; } var result = [], vals = str.match(new RegExp(".{1}", "g")); for (var i in vals) { var rwxObj = this.getRwxObj(); rwxObj.read = !!vals[i].match("[4567]"); rwxObj.write = !!vals[i].match("[2367]"); rwxObj.exec = !!vals[i].match("[1357]"); result.push(rwxObj); } return { owner : result[0], group : result[1], others: result[2] }; }; return Chmod; }); })();;(function() { angular.module('FileManagerApp').constant("$config", { appName: "https://github.com/joni2back/angular-filemanager", defaultLang: "en", listUrl: "bridges/php/handler.php", uploadUrl: "/hosting/filemanager/upload", renameUrl: "/hosting/filemanager/item/rename", copyUrl: "/hosting/filemanager/item/copy", removeUrl: "/hosting/filemanager/item/remove", editUrl: "/hosting/filemanager/item/edit", getContentUrl: "bridges/php/handler.php", createFolderUrl: "/hosting/filemanager/item/folder/create", downloadFileUrl: "/hosting/filemanager/item/download", compressUrl: "/hosting/filemanager/item/compress", extractUrl: "/hosting/filemanager/item/extract", permissionsUrl: "/hosting/filemanager/item/permissions/set", enablePermissionsModule: true, enableCompressChooseName: false, isEditableFilePattern: '\\.(txt|html|htm|aspx|asp|ini|pl|py|md|php|css|js|log|htaccess|htpasswd|json)$', isImageFilePattern: '\\.(jpg|jpeg|gif|bmp|png|svg|tiff)$', isExtractableFilePattern: '\\.(zip|gz|tar|rar|gzip)$' }); })();;(function() { angular.module('FileManagerApp').controller('FileManagerCtrl', [ '$scope', '$translate', '$cookies', '$config', 'item', 'fileNavigator', 'fileUploader', function($scope, $translate, $cookies, $config, Item, FileNavigator, FileUploader) {  $scope.config = $config; $scope.appName = $config.appName; $scope.orderProp = ['model.type', 'model.name']; $scope.query = ''; $scope.temp = new Item(); $scope.fileNavigator = new FileNavigator(); $scope.fileUploader = FileUploader; $scope.uploadFileList = []; $scope.viewTemplate = $cookies.viewTemplate || 'main-table.html';  $scope.setTemplate = function(name) { $scope.viewTemplate = $cookies.viewTemplate = name; };  $scope.changeLanguage = function (locale) { if (locale) { return $translate.use($cookies.language = locale); } $translate.use($cookies.language || $config.defaultLang); };  $scope.touch = function(item) { item = (item && item.revert && item) || new Item(); item.revert && item.revert(); $scope.temp = item; };  $scope.smartRightClick = function(item) { $scope.touch(item); };  $scope.smartClick = function(item) { if (item.isFolder()) { return $scope.fileNavigator.folderClick(item); }; if (item.isImage()) { return item.preview(); } if (item.isEditable()) { item.getContent(); $scope.touch(item); $('#edit').modal('show'); return; } };  $scope.edit = function(item) { item.edit(function() { $('#edit').modal('hide'); }); };  $scope.changePermissions = function(item) { item.changePermissions(function() { $('#changepermissions').modal('hide'); }); };  $scope.copy = function(item) { var samePath = item.tempModel.path.join() === item.model.path.join(); if (samePath && $scope.fileNavigator.fileNameExists(item.tempModel.name)) { item.error = $translate.instant('error_invalid_filename'); return false; } item.copy(function() { $scope.fileNavigator.refresh(); $('#copy').modal('hide'); }); };  $scope.compress = function(item) { item.compress(function() { item.success = true; $scope.fileNavigator.refresh(); }, function() { item.success = false; }); };  $scope.extract = function(item) { item.extract(function() { item.success = true; $scope.fileNavigator.refresh(); }, function() { item.success = false; }); };  $scope.remove = function(item) { item.remove(function() { $scope.fileNavigator.refresh(); $('#delete').modal('hide'); }); };  $scope.rename = function(item) { var samePath = item.tempModel.path.join() === item.model.path.join(); if (samePath && $scope.fileNavigator.fileNameExists(item.tempModel.name)) { item.error = $translate.instant('error_invalid_filename'); return false; } item.rename(function() { $scope.fileNavigator.refresh(); $('#rename').modal('hide'); }); };  $scope.createFolder = function(item) { name = item.tempModel.name && item.tempModel.name.trim(); item.tempModel.type = 'dir'; item.tempModel.path = $scope.fileNavigator.currentPath; if (name && !$scope.fileNavigator.fileNameExists(name)) { item.createFolder(function() { $scope.fileNavigator.refresh(); $('#newfolder').modal('hide'); }); } else { $scope.temp.error = $translate.instant('error_invalid_filename'); return false; } };  $scope.uploadFiles = function() { $scope.fileUploader.upload($scope.uploadFileList, $scope.fileNavigator.currentPath, function() { $scope.fileNavigator.refresh(); $('#uploadfile').modal('hide'); }); };  $scope.getQueryParam = function(param) { var found; window.location.search.substr(1).split("&").forEach(function(item) { if (param === item.split("=")[0]) { found = item.split("=")[1]; } }); return found; };  $scope.changeLanguage($scope.getQueryParam('lang')); $scope.isWindows = $scope.getQueryParam('server') === 'Windows'; $scope.fileNavigator.refresh();  }]); })(); ;(function() { angular.module('FileManagerApp').service('fileNavigator', [ '$http', '$config', 'item', function ($http, $config, Item) { $http.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'; var FileNavigator = function() { this.requesting = false; this.fileList = []; this.currentPath = []; this.history = []; this.error = ''; }; FileNavigator.prototype.refresh = function(success, error) { var self = this; var path = self.currentPath.join('/'); var data = {params: { mode: "list", onlyFolders: false, path: '/' + path }}; self.requesting = true; self.fileList = []; self.error = ''; $http.post($config.listUrl, data).success(function(data) { self.fileList = []; angular.forEach(data.result, function(file) { self.fileList.push(new Item(file, self.currentPath)); }); self.requesting = false; self.buildTree(path); if (data.error) { self.error = data.error; return typeof error === 'function' && error(data); } typeof success === 'function' && success(data); }).error(function(data) { self.requesting = false; typeof error === 'function' && error(data); }); }; FileNavigator.prototype.buildTree = function(path) { var self = this; var recursive = function(parent, file, path) { var absName = path ? (path + '/' + file.name) : file.name; if (parent.name && !path.match(new RegExp('^' + parent.name))) { parent.nodes = []; } if (parent.name !== path) { for (var i in parent.nodes) { recursive(parent.nodes[i], file, path); } } else { for (var i in parent.nodes) { if (parent.nodes[i].name === absName) { return; } } parent.nodes.push({name: absName, nodes: []}); } }; !self.history.length && self.history.push({name: path, nodes: []}); for (var i in self.fileList) { var file = self.fileList[i].model; file.type === 'dir' && recursive(self.history[0], file, path); } }; FileNavigator.prototype.folderClickByName = function(fullPath) { var self = this; fullPath = fullPath.replace(new RegExp("^\/*", "g"), '').split('/'); self.currentPath = fullPath && fullPath[0] === "" ? [] : fullPath; self.refresh(); }; FileNavigator.prototype.folderClick = function(item) { var self = this; if (item && item.model.type === 'dir') { self.currentPath.push(item.model.name); self.refresh(); } }; FileNavigator.prototype.upDir = function() { var self = this; if (self.currentPath[0]) { self.currentPath = self.currentPath.slice(0, -1); self.refresh(); } }; FileNavigator.prototype.goTo = function(index) { var self = this; self.currentPath = self.currentPath.slice(0, index + 1); self.refresh(); }; FileNavigator.prototype.fileNameExists = function(fileName) { var self = this; for (var item in self.fileList) { item = self.fileList[item]; if (fileName.trim && item.model.name.trim() === fileName.trim()) { return true; } } }; FileNavigator.prototype.listHasFolders = function() { var self = this; for (var item in self.fileList) { if (self.fileList[item].model.type === 'dir') { return true; } } }; return FileNavigator; }]); })();;(function() { angular.module('FileManagerApp').service('fileUploader', ['$http', '$config', function ($http, $config) { var self = this; self.requesting = false; self.upload = function(fileList, path, success, error) { var form = new FormData(); form.append('destination', '/' + path.join('/')); for (var file in fileList) { fileObj = fileList[file]; typeof fileObj === 'object' && form.append('file-' + (1 + parseInt(file)), fileObj); } self.requesting = true; $http.post($config.uploadUrl, form, { transformRequest: angular.identity, headers: {'Content-Type': undefined} }).success(function(data) { self.requesting = false; typeof success === 'function' && success(data); }).error(function(data) { self.requesting = false; typeof error === 'function' && error(data); }); }; }]); })();;(function() { angular.module('FileManagerApp').factory('item', ['$http', '$translate', '$config', 'chmod', function($http, $translate, $config, Chmod) { var Item = function(model, path) { var rawModel = { name: '', path: path || [], type: 'file', size: 0, date: model && new Date(model.date), perms: new Chmod(model && model.rights), content: '', sizeKb: function() { return Math.round(this.size / 1024, 1); }, fullPath: function() { return ('/' + this.path.join('/') + '/' + this.name).replace(new RegExp('\/\/'), '/'); } }; this.error = ''; this.inprocess = false; this.model = angular.copy(rawModel); this.tempModel = angular.copy(rawModel); this.update = function() { angular.extend(this.model, angular.copy(this.tempModel)); return this; }; this.revert = function() { angular.extend(this.tempModel, angular.copy(this.model)); this.error = ''; return this; }; angular.extend(this.model, model); angular.extend(this.tempModel, model); }; Item.prototype.defineCallback = function(data, success, error) { /* Check if there was some error in a 200 response */ var self = this; if (data.result && data.result.error) { self.error = data.result.error; return typeof error === 'function' && error(data); } if (data.error) { self.error = data.error.message; return typeof error === 'function' && error(data); } self.update(); return typeof success === 'function' && success(data); }; Item.prototype.createFolder = function(success, error) { var self = this; var data = {params: { mode: "addfolder", path: self.tempModel.path.join('/'), name: self.tempModel.name }}; if (self.tempModel.name.trim()) { self.inprocess = true; self.error = ''; $http.post($config.createFolderUrl, data).success(function(data) { self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_creating_folder'); typeof error === 'function' && error(data); })['finally'](function() { self.inprocess = false; }); } return self; }; Item.prototype.rename = function(success, error) { var self = this; var data = {params: { "mode": "rename", "path": self.model.fullPath(), "newPath": self.tempModel.fullPath() }}; if (self.tempModel.name.trim()) { self.inprocess = true; self.error = ''; $http.post($config.renameUrl, data).success(function(data) { self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_renaming'); typeof error === 'function' && error(data); })['finally'](function() { self.inprocess = false; }); } return self; }; Item.prototype.copy = function(success, error) { var self = this; var data = {params: { mode: "copy", path: self.model.fullPath(), newPath: self.tempModel.fullPath() }}; if (self.tempModel.name.trim()) { self.inprocess = true; self.error = ''; $http.post($config.copyUrl, data).success(function(data) { self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_copying'); typeof error === 'function' && error(data); })['finally'](function() { self.inprocess = false; }); } return self; }; Item.prototype.compress = function(success, error) { var self = this; var data = {params: { mode: "compress", path: self.model.fullPath(), destination: self.tempModel.fullPath() }}; if (self.tempModel.name.trim()) { self.inprocess = true; self.error = ''; $http.post($config.compressUrl, data).success(function(data) { self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_compressing'); typeof error === 'function' && error(data); })['finally'](function() { self.inprocess = false; }); } return self; }; Item.prototype.extract = function(success, error) { var self = this; var data = {params: { mode: "extract", path: self.model.fullPath(), sourceFile: self.model.fullPath(), destination: self.tempModel.fullPath() }}; self.inprocess = true; self.error = ''; return $http.post($config.extractUrl, data).success(function(data) { self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_extracting'); typeof error === 'function' && error(data); })["finally"](function() { self.inprocess = false; }); return self; }; Item.prototype.download = function(preview) { var self = this; var data = { mode: "download", preview: preview, path: self.model.fullPath() }; var url = [$config.downloadFileUrl, $.param(data)].join('?'); if (self.model.type !== 'dir') { window.open(url, '_blank', ''); } return self; }; Item.prototype.preview = function() { var self = this; return self.download(true); }; Item.prototype.getContent = function(success, error) { var self = this; var data = {params: { mode: "editfile", path: self.tempModel.fullPath() }}; self.inprocess = true; self.error = ''; $http.post($config.getContentUrl, data).success(function(data) { self.tempModel.content = self.model.content = data.result; self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_getting_content'); typeof error === 'function' && error(data); })['finally'](function() { self.inprocess = false; }); return self; }; Item.prototype.remove = function(success, error) { var self = this; var data = {params: { mode: "delete", path: self.tempModel.fullPath() }}; self.inprocess = true; self.error = ''; $http.post($config.removeUrl, data).success(function(data) { self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_deleting'); typeof error === 'function' && error(data); })['finally'](function() { self.inprocess = false; }); return self; }; Item.prototype.edit = function(success, error) { var self = this; var data = {params: { mode: "savefile", content: self.tempModel.content, path: self.tempModel.fullPath() }}; self.inprocess = true; self.error = ''; $http.post($config.editUrl, data).success(function(data) { self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_modifying'); typeof error === 'function' && error(data); })['finally'](function() { self.inprocess = false; }); return self; }; Item.prototype.changePermissions = function(success, error) { var self = this; var data = {params: { mode: "changepermissions", path: self.tempModel.fullPath(), perms: self.tempModel.perms.toOctal(), permsCode: self.tempModel.perms.toCode() }}; self.inprocess = true; self.error = ''; $http.post($config.permissionsUrl, data).success(function(data) { self.defineCallback(data, success, error); }).error(function(data) { self.error = data.result && data.result.error ? data.result.error: $translate.instant('error_changing_perms'); typeof error === 'function' && error(data); })['finally'](function() { self.inprocess = false; }); return self; }; Item.prototype.isFolder = function() { return this.model.type === 'dir'; }; Item.prototype.isEditable = function() { return !this.isFolder() && !!this.model.name.toLowerCase().match(new RegExp($config.isEditableFilePattern)); }; Item.prototype.isImage = function() { return !!this.model.name.toLowerCase().match(new RegExp($config.isImageFilePattern)); }; Item.prototype.isCompressible = function() { return this.isFolder(); }; Item.prototype.isExtractable = function() { return !!(!this.isFolder() && this.model.name.match($config.isExtractableFilePattern)); }; return Item; }]); })(); ;(function() { angular.module('FileManagerApp').controller('ModalFileManagerCtrl', [ '$scope', '$rootScope', '$config', 'fileNavigator', function($scope, $rootScope, $config, FileNavigator) {  $scope.appName = $config.appName; $scope.orderProp = ['model.type', 'model.name']; $scope.fileNavigator = new FileNavigator();  $rootScope.select = function(item, temp) { temp.tempModel.path = item.model.fullPath().split('/'); $('#selector').modal('hide'); };  $rootScope.openNavigator = function(item) { $scope.fileNavigator.currentPath = item.model.path.slice(); $scope.fileNavigator.refresh(); $('#selector').modal('show'); };  }]); })();;(function() { angular.module('FileManagerApp').config(function($translateProvider) { $translateProvider.translations('en', { filemanager: "File Manager", language: "Language", english: "English", spanish: "Spanish", portuguese: "Portuguese", confirm: "Confirm", cancel: "Cancel", close: "Close", upload_file: "Upload file", files_will_uploaded_to: "Files will be uploaded to", uploading: "Uploading", permissions: "Permissions", select_destination_folder: "Select the destination folder", source: "Source", destination: "Destination", copy_file: "Copy file", sure_to_delete: "Are you sure to delete", change_name_move: "Change name / move", enter_new_name_for: "Enter new name for", extract_item: "Extract item", extraction_started: "Extraction started in a background process", compression_started: "Compression started in a background process", enter_folder_name_for_extraction: "Enter the folder name for the extraction of", enter_folder_name_for_compression: "Enter the folder name for the compression of", toggle_fullscreen: "Toggle fullscreen", edit_file: "Edit file", file_content: "File content", loading: "Loading", search: "Search", create_folder: "Create folder", create: "Create", folder_name: "Folder name", upload: "Upload", change_permissions: "Change permissions", change: "Change", details: "Details", icons: "Icons", list: "List", name: "Name", size: "Size", actions: "Actions", date: "Date", no_files_in_folder: "No files in this folder", no_folders_in_folder: "This folder not contains children folders", select_this: "Select this", go_back: "Go back", wait: "Wait", move: "Move", download: "Download", view_item: "View item", remove: "Delete", edit: "Edit", copy: "Copy", rename: "Rename", extract: "Extract", compress: "Compress", error_invalid_filename: "Invalid filename or already exists, specify another name", error_modifying: "An error occurred modifying the file", error_deleting: "An error occurred deleting the file or folder", error_renaming: "An error occurred renaming the file", error_copying: "An error occurred copying the file", error_compressing: "An error occurred compressing the file or folder", error_extracting: "An error occurred extracting the file", error_creating_folder: "An error occurred creating the folder", error_getting_content: "An error occurred getting the content of the file", error_changing_perms: "An error occurred changing the permissions of the file", sure_to_start_compression_with: "Are you sure to compress", owner: "Owner", group: "Group", others: "Others", read: "Read", write: "Write", exec: "Exec", original: "Original", changes: "Changes" }); $translateProvider.translations('pt', { filemanager: "Gerenciador de arquivos", language: "Língua", english: "Inglês", spanish: "Espanhol", portuguese: "Portugues", confirm: "Confirmar", cancel: "Cancelar", close: "Desligar", upload_file: "Carregar arquivo", files_will_uploaded_to: "Os arquivos serão enviados para", uploading: "Carregar", permissions: "Autorizações", select_destination_folder: "Selecione a pasta de destino", source: "Origem", destination: "Destino", copy_file: "Copiar arquivo", sure_to_delete: "Tem certeza de que deseja apagar", change_name_move: "Rebatizar / mudança", enter_new_name_for: "Digite o novo nome para", extract_item: "Extrair arquivo", extraction_started: "A extração começou em um processo em segundo plano", compression_started: "A compressão começou em um processo em segundo plano", enter_folder_name_for_extraction: "Digite o nome da pasta para a extração de", enter_folder_name_for_compression: "Digite o nome da pasta para Compressão", toggle_fullscreen: "Ativar/desativar tela cheia", edit_file: "Editar arquivo", file_content: "Conteúdo do arquivo", loading: "Carregando", search: "Localizar", create_folder: "Criar Pasta", create: "Criar", folder_name: "Nome da pasta", upload: "Fazer", change_permissions: "Alterar permissões", change: "Alterar", details: "Detalhes", icons: "Icones", list: "Lista", name: "Nome", size: "Tamanho", actions: "Ações", date: "Data", no_files_in_folder: "Não há arquivos nesta pasta", no_folders_in_folder: "Esta pasta no contém subpastas", select_this: "Selecione esta", go_back: "Voltar", wait: "Aguente", move: "Mudar", download: "Baixar", view_item: "Veja o arquivo", remove: "Tirar", edit: "Editar", copy: "Copiar", rename: "Rebatizar", extract: "Extrair", compress: "Comprimir", error_invalid_filename: "Invalid ou nome de arquivo já existe, especifique outro nome", error_modifying: "Ocorreu um erro ao modificar o arquivo", error_deleting: "Ocorreu um erro ao excluir o arquivo ou pasta", error_renaming: "Ocorreu um erro ao mudar o nome do arquivo", error_copying: "Ocorreu um erro ao copiar o arquivo", error_compressing: "Ocorreu um erro ao comprimir o arquivo ou pasta", error_extracting: "Ocorreu um erro ao extrair o arquivo", error_creating_folder: "Ocorreu um erro ao criar a pasta", error_getting_content: "Ocorreu um erro ao obter o conteúdo do arquivo", error_changing_perms: "Ocorreu um erro ao alterar as permissões do arquivo", sure_to_start_compression_with: "Tem certeza que deseja comprimir", owner: "Proprietário", group: "Grupo", others: "Outros", read: "Leitura", write: "Gravável", exec: "Execução", original: "Original", changes: "Mudanças" }); $translateProvider.translations('es', { filemanager: "Administrador de archivos", language: "Idioma", english: "Ingles", spanish: "Español", portuguese: "Portugues", confirm: "Confirmar", cancel: "Cancelar", close: "Cerrar", upload_file: "Subir archivo", files_will_uploaded_to: "Los archivos seran subidos a", uploading: "Subiendo", permissions: "Permisos", select_destination_folder: "Seleccione la carpeta de destino", source: "Origen", destination: "Destino", copy_file: "Copiar archivo", sure_to_delete: "Esta seguro que desea eliminar", change_name_move: "Renombrar / mover", enter_new_name_for: "Ingrese el nuevo nombre para", extract_item: "Extraer archivo", extraction_started: "La extraccion ha comenzado en un proceso de segundo plano", compression_started: "La compresion ha comenzado en un proceso de segundo plano", enter_folder_name_for_extraction: "Ingrese el nombre de la carpeta para la extraccion de", enter_folder_name_for_compression: "Ingrese el nombre de la carpeta para la compresion de", toggle_fullscreen: "Activar/Desactivar pantalla completa", edit_file: "Editar archivo", file_content: "Contenido del archivo", loading: "Cargando", search: "Buscar", create_folder: "Crear carpeta", create: "Crear", folder_name: "Nombre de la carpeta", upload: "Subir", change_permissions: "Cambiar permisos", change: "Cambiar", details: "Detalles", icons: "Iconos", list: "Lista", name: "Nombre", size: "Tamaño", actions: "Acciones", date: "Fecha", no_files_in_folder: "No hay archivos en esta carpeta", no_folders_in_folder: "Esta carpeta no contiene sub-carpetas", select_this: "Seleccionar esta", go_back: "Volver", wait: "Espere", move: "Mover", download: "Descargar", view_item: "Ver archivo", remove: "Eliminar", edit: "Editar", copy: "Copiar", rename: "Renombrar", extract: "Extraer", compress: "Comprimir", error_invalid_filename: "El nombre del archivo es invalido o ya existe", error_modifying: "Ocurrio un error al intentar modificar el archivo", error_deleting: "Ocurrio un error al intentar eliminar el archivo", error_renaming: "Ocurrio un error al intentar renombrar el archivo", error_copying: "Ocurrio un error al intentar copiar el archivo", error_compressing: "Ocurrio un error al intentar comprimir el archivo", error_extracting: "Ocurrio un error al intentar extraer el archivo", error_creating_folder: "Ocurrio un error al intentar crear la carpeta", error_getting_content: "Ocurrio un error al obtener el contenido del archivo", error_changing_perms: "Ocurrio un error al cambiar los permisos del archivo", sure_to_start_compression_with: "Esta seguro que desea comprimir", owner: "Propietario", group: "Grupo", others: "Otros", read: "Lectura", write: "Escritura", exec: "Ejecucion", original: "Original", changes: "Cambios" }); }); })();